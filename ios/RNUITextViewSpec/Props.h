
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>

namespace facebook::react {

enum class RNUITextViewChildFontStyle { Normal, Italic };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNUITextViewChildFontStyle &result) {
  auto string = (std::string)value;
  if (string == "normal") { result = RNUITextViewChildFontStyle::Normal; return; }
  if (string == "italic") { result = RNUITextViewChildFontStyle::Italic; return; }
  abort();
}

static inline std::string toString(const RNUITextViewChildFontStyle &value) {
  switch (value) {
    case RNUITextViewChildFontStyle::Normal: return "normal";
    case RNUITextViewChildFontStyle::Italic: return "italic";
  }
}
enum class RNUITextViewChildFontWeight { Normal, Bold, UltraLight, Light, Medium, Semibold, Heavy };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNUITextViewChildFontWeight &result) {
  auto string = (std::string)value;
  if (string == "normal") { result = RNUITextViewChildFontWeight::Normal; return; }
  if (string == "bold") { result = RNUITextViewChildFontWeight::Bold; return; }
  if (string == "ultraLight") { result = RNUITextViewChildFontWeight::UltraLight; return; }
  if (string == "light") { result = RNUITextViewChildFontWeight::Light; return; }
  if (string == "medium") { result = RNUITextViewChildFontWeight::Medium; return; }
  if (string == "semibold") { result = RNUITextViewChildFontWeight::Semibold; return; }
  if (string == "heavy") { result = RNUITextViewChildFontWeight::Heavy; return; }
  abort();
}

static inline std::string toString(const RNUITextViewChildFontWeight &value) {
  switch (value) {
    case RNUITextViewChildFontWeight::Normal: return "normal";
    case RNUITextViewChildFontWeight::Bold: return "bold";
    case RNUITextViewChildFontWeight::UltraLight: return "ultraLight";
    case RNUITextViewChildFontWeight::Light: return "light";
    case RNUITextViewChildFontWeight::Medium: return "medium";
    case RNUITextViewChildFontWeight::Semibold: return "semibold";
    case RNUITextViewChildFontWeight::Heavy: return "heavy";
  }
}
enum class RNUITextViewChildTextDecorationLine { None, Underline, LineThrough };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNUITextViewChildTextDecorationLine &result) {
  auto string = (std::string)value;
  if (string == "none") { result = RNUITextViewChildTextDecorationLine::None; return; }
  if (string == "underline") { result = RNUITextViewChildTextDecorationLine::Underline; return; }
  if (string == "line-through") { result = RNUITextViewChildTextDecorationLine::LineThrough; return; }
  abort();
}

static inline std::string toString(const RNUITextViewChildTextDecorationLine &value) {
  switch (value) {
    case RNUITextViewChildTextDecorationLine::None: return "none";
    case RNUITextViewChildTextDecorationLine::Underline: return "underline";
    case RNUITextViewChildTextDecorationLine::LineThrough: return "line-through";
  }
}
enum class RNUITextViewChildTextDecorationStyle { Solid, Double, Dotted, Dashed };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNUITextViewChildTextDecorationStyle &result) {
  auto string = (std::string)value;
  if (string == "solid") { result = RNUITextViewChildTextDecorationStyle::Solid; return; }
  if (string == "double") { result = RNUITextViewChildTextDecorationStyle::Double; return; }
  if (string == "dotted") { result = RNUITextViewChildTextDecorationStyle::Dotted; return; }
  if (string == "dashed") { result = RNUITextViewChildTextDecorationStyle::Dashed; return; }
  abort();
}

static inline std::string toString(const RNUITextViewChildTextDecorationStyle &value) {
  switch (value) {
    case RNUITextViewChildTextDecorationStyle::Solid: return "solid";
    case RNUITextViewChildTextDecorationStyle::Double: return "double";
    case RNUITextViewChildTextDecorationStyle::Dotted: return "dotted";
    case RNUITextViewChildTextDecorationStyle::Dashed: return "dashed";
  }
}

class RNUITextViewChildProps final : public ViewProps {
 public:
  RNUITextViewChildProps() = default;
  RNUITextViewChildProps(const PropsParserContext& context, const RNUITextViewChildProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string text{};
  SharedColor color{};
  Float fontSize{0.0};
  RNUITextViewChildFontStyle fontStyle{RNUITextViewChildFontStyle::Normal};
  RNUITextViewChildFontWeight fontWeight{RNUITextViewChildFontWeight::Normal};
  std::string fontFamily{};
  Float letterSpacing{0.0};
  Float lineHeight{0.0};
  RNUITextViewChildTextDecorationLine textDecorationLine{RNUITextViewChildTextDecorationLine::None};
  RNUITextViewChildTextDecorationStyle textDecorationStyle{RNUITextViewChildTextDecorationStyle::Solid};
  SharedColor textDecorationColor{};
  Float shadowRadius{0.0};
};

enum class RNUITextViewEllipsizeMode { Head, Middle, Tail, Clip };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNUITextViewEllipsizeMode &result) {
  auto string = (std::string)value;
  if (string == "head") { result = RNUITextViewEllipsizeMode::Head; return; }
  if (string == "middle") { result = RNUITextViewEllipsizeMode::Middle; return; }
  if (string == "tail") { result = RNUITextViewEllipsizeMode::Tail; return; }
  if (string == "clip") { result = RNUITextViewEllipsizeMode::Clip; return; }
  abort();
}

static inline std::string toString(const RNUITextViewEllipsizeMode &value) {
  switch (value) {
    case RNUITextViewEllipsizeMode::Head: return "head";
    case RNUITextViewEllipsizeMode::Middle: return "middle";
    case RNUITextViewEllipsizeMode::Tail: return "tail";
    case RNUITextViewEllipsizeMode::Clip: return "clip";
  }
}

class RNUITextViewProps final : public ViewProps {
 public:
  RNUITextViewProps() = default;
  RNUITextViewProps(const PropsParserContext& context, const RNUITextViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int numberOfLines{0};
  bool allowsFontScaling{false};
  RNUITextViewEllipsizeMode ellipsizeMode{RNUITextViewEllipsizeMode::Tail};
  bool selectable{false};
};

} // namespace facebook::react
